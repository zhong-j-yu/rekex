
# modules of rekex

rekex-common_util
    some basic utils used by many modules

rekex-regexp
    RegExp and RegExpApi

rekex-grammar
    spec
        basic annotations and types for Rekex Spec
    helper
        more annotations and types that can be used to define grammars
    annotype
        AnnoType - representation of annotated types
    annomacro
        AnnoMacro
    grammar
        GrammarRule, GrammarBuilder, and Grammar
            build grammars from user datatypes

rekex-parser
    build parsers from Grammars

rekex-example
    examples of rekex-regexp
    examples of rekex-parser

rekex-example-modular
    examples of modularized user app

## comments ------

`rekex-grammar` could be split into even smaller modules; not worth it for now.

Types in `helper` don't require special handling by grammar and parser builders;
  they conform to the spec therefore they are handled transparently.
  For now, put it under rekex-grammar to avoid having too many modules.
  Also, it's possible that in future versions grammar and parser builders
  do optimize for those helper types with special handlings.

## java module

Rekex modules are also organized as Java modules.
This is no problem at all for user apps that are not modularized;
Rekex modules are simply jars on the classpath.

For user apps that are modularized, they'll need to depend on
rekex modules, and open to rekex modules for reflection.
It's easy if user module is simply "open".
Otherwise it's a lot of trouble.

