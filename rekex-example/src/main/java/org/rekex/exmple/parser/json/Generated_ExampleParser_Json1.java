
// !! this file is automatically generated; do not modify.

package org.rekex.exmple.parser.json;

import org.rekex.parser.PegParser;
import org.rekex.parser.ParseResult;

import java.util.List;
import org.rekex.exmple.parser.json.ExampleParser_Json1.BsEsc;
import org.rekex.exmple.parser.json.ExampleParser_Json1.Char1;
import org.rekex.exmple.parser.json.ExampleParser_Json1.Comma;
import org.rekex.exmple.parser.json.ExampleParser_Json1.Digit;
import org.rekex.exmple.parser.json.ExampleParser_Json1.Digits;
import org.rekex.exmple.parser.json.ExampleParser_Json1.DigitsNZ;
import org.rekex.exmple.parser.json.ExampleParser_Json1.EscChar;
import org.rekex.exmple.parser.json.ExampleParser_Json1.EscUhhhh;
import org.rekex.exmple.parser.json.ExampleParser_Json1.Exponent;
import org.rekex.exmple.parser.json.ExampleParser_Json1.Fraction;
import org.rekex.exmple.parser.json.ExampleParser_Json1.Input;
import org.rekex.exmple.parser.json.ExampleParser_Json1.JsonArray;
import org.rekex.exmple.parser.json.ExampleParser_Json1.JsonBoolean;
import org.rekex.exmple.parser.json.ExampleParser_Json1.JsonNull;
import org.rekex.exmple.parser.json.ExampleParser_Json1.JsonNumber;
import org.rekex.exmple.parser.json.ExampleParser_Json1.JsonObject;
import org.rekex.exmple.parser.json.ExampleParser_Json1.JsonString;
import org.rekex.exmple.parser.json.ExampleParser_Json1.JsonValue;
import org.rekex.exmple.parser.json.ExampleParser_Json1.Member;
import org.rekex.exmple.parser.json.ExampleParser_Json1.OptWs;
import org.rekex.helper.datatype.Either;
import org.rekex.helper.datatype.Either.Left;
import org.rekex.helper.datatype.Either.Right;
import org.rekex.helper.datatype.Opt;
import org.rekex.helper.datatype.Opt.None;
import org.rekex.helper.datatype.Opt.Some;
import org.rekex.helper.datatype.SepBy;
import org.rekex.helper.datatype.SepBy.Empty;
import org.rekex.helper.datatype.SepBy1;
import org.rekex.helper.datatype.seq.Seq2;


// Generated recursive descent PEG parser by Rekex

// rootType: Input

// !! this file is automatically generated; do not modify.
@SuppressWarnings({"all", "unchecked"})
public class Generated_ExampleParser_Json1 implements PegParser<Input>
{
    static final int rootTypeRuleId = 0;

    final Object catalog;
    public Generated_ExampleParser_Json1()
    {
        this.catalog = null;
    }

    @Override
    public ParseResult<Input> parse(CharSequence chars, int start, int end)
    {
        _State state = new _State();
        state.catalog = this.catalog;
        state.chars = chars;
        state.start = start;
        state.end = end;
        state.inputInfo = new org.rekex.parser.InputInfo(chars, start, end);

        try
        {
            state = match(rootTypeRuleId, state, -1);
        }
        catch (_FatalEx fatalEx)
        {
            var stack = pathToStack(state.path, state.pathLen);
            return new ParseResult.Fatal<>(fatalEx.position, fatalEx.cause, stack);
        }

        if(!state.fail)
        {
            Input obj = state.pickObj();
            if(state.start==state.end)
                return new ParseResult.Full<>(obj);
            else
                return new ParseResult.Partial<>(obj, state.start);
        }
        else
        {
            var stack = pathToStack(state.maxFailPath, state.maxFailPath.length);
            String msg = failMsg(state.maxFailReason, state.maxFailEx, _DatatypeList.list.get(state.maxFailRuleId));
            return new ParseResult.Fail<>(state.maxFailPos, msg, state.maxFailEx, stack);
        }
    }

    final static class _State implements Cloneable
    {
        Object catalog;
        CharSequence chars;
        int start;
        int end;

        org.rekex.parser.InputInfo inputInfo;

        boolean fail;
        // if fail==false, match is success, obj is set (null is allowed)
        Object obj;

        int[] path = new int[64];
        int pathLen = 0;

        int maxFailPos = -1;
        int[] maxFailPath;
        int maxFailReason;
        Exception maxFailEx;
        int maxFailRuleId;

        public _State clone()
        {
            try {
                return (_State)super.clone();
            } catch (CloneNotSupportedException e) {
                throw new AssertionError(e);
            }
        }

        int gStart, gEnd; // tmp data buffer for regex

        void pathPush(int ruleId, int subIndex)
        {
            if(pathLen+3 > path.length)
                path = java.util.Arrays.copyOf(path, path.length+64);
            path[pathLen++] = ruleId;
            path[pathLen++] = this.start;
            path[pathLen++] = subIndex;
        }
        void pathPop()
        {
            pathLen -= 3;
        }

        _State ok(Object obj)
        {
            this.fail = false;
            this.obj = obj;
            return this;
        }
        <T> T pickObj()
        {
            T t = (T)obj;
            obj = null;
            return t;
        }

        _State fail(int position, int reason, Exception ex, int ruleId, int startReset)
        {
            if(position>maxFailPos)
            {
                maxFailPos = position;
                maxFailPath = java.util.Arrays.copyOf(path, pathLen);
                maxFailReason = reason;
                maxFailEx = ex;
                maxFailRuleId = ruleId;
            }
            return fail(startReset);
        }
        _State fail(int startReset)
        {
            this.fail = true;
            this.obj = null;
            this.start = startReset;
            return this;
        }

    }
    static final int failReason_predicate = 0;   // info: Exception
    static final int failReason_neg = 1;         // info: subrule ID
    static final int failReason_regex = 2;
    static final int failReason_regex_group = 3;

    static String failMsg(int reason, Exception ex, org.rekex.annotype.AnnoType type)
    {
        String typeStr = type.toString(false);
        return switch (reason){
            case failReason_predicate
                -> ex.getMessage()!=null ? ex.getMessage() : ex.toString();
            case failReason_neg
                -> typeStr + " failed; input matched subrule";
            case failReason_regex
                -> "Input does not match regex: "+typeStr;
            case failReason_regex_group
                -> "Input does not match regex group: "+typeStr;
            default -> throw new AssertionError("unexpected reason: "+reason);
        };
    }

    static java.util.ArrayList<ParseResult.Node> pathToStack(int[] path, int pathLen)
    {
        java.util.ArrayList<ParseResult.Node> stack = new java.util.ArrayList<>(pathLen/2);
        for(int i=pathLen-1; i>=0;)
        {
            int _subIndex = path[i--];
            int _start = path[i--];
            int _ruleId = path[i--];
            var datatype = _DatatypeList.list.get(_ruleId);
            stack.add(new ParseResult.Node(datatype, _start, _subIndex));
        }
        return stack;
    }

    static class _FatalEx extends Exception
    {
        final int position;
        final Exception cause;
        _FatalEx(int position, Exception cause)
        {
            super(null, null, false, false);
            this.position = position;
            this.cause = cause;
        }
    }

    // = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
    // rules
    // = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

    static _State match(int ruleId, _State state, int subIndex) throws _FatalEx
    {
        state.pathPush(ruleId, subIndex);
        state = switch(ruleId){
            case 0 -> rule_0(state); // Input
            case 1 -> rule_1(state); // OptWs
            case 2 -> rule_2(state); // JsonValue
            case 3 -> rule_3(state); // JsonObject
            case 4 -> rule_4(state); // JsonArray
            case 5 -> rule_5(state); // JsonBoolean
            case 6 -> rule_6(state); // JsonNull
            case 7 -> rule_7(state); // JsonString
            case 8 -> rule_8(state); // JsonNumber
            case 9 -> rule_9(state); // @Word("{")Void
            case 10 -> rule_10(state); // SepBy<Member,Comma>
            case 11 -> rule_11(state); // @Word("}")Void
            case 12 -> rule_12(state); // @Word("[")Void
            case 13 -> rule_13(state); // SepBy<JsonValue,Comma>
            case 14 -> rule_14(state); // @Word("]")Void
            case 15 -> rule_15(state); // @Word("true")JsonBoolean
            case 16 -> rule_16(state); // @Word("false")JsonBoolean
            case 17 -> rule_17(state); // @Ch("\"")Void
            case 18 -> rule_18(state); // Either<Char1,BsEsc>[]
            case 19 -> rule_19(state); // Opt<@Ch("-")Character>
            case 20 -> rule_20(state); // Either<DigitsNZ,Digit>
            case 21 -> rule_21(state); // Opt<Fraction>
            case 22 -> rule_22(state); // Opt<Exponent>
            case 23 -> rule_23(state); // SepBy1<Member,Comma>
            case 24 -> rule_24(state); // Empty<Member,Comma>
            case 25 -> rule_25(state); // SepBy1<JsonValue,Comma>
            case 26 -> rule_26(state); // Empty<JsonValue,Comma>
            case 27 -> rule_27(state); // Either<Char1,BsEsc>
            case 28 -> rule_28(state); // Some<@Ch("-")Character>
            case 29 -> rule_29(state); // None<@Ch("-")Character>
            case 30 -> rule_30(state); // Left<DigitsNZ,Digit>
            case 31 -> rule_31(state); // Right<DigitsNZ,Digit>
            case 32 -> rule_32(state); // Some<Fraction>
            case 33 -> rule_33(state); // None<Fraction>
            case 34 -> rule_34(state); // Some<Exponent>
            case 35 -> rule_35(state); // None<Exponent>
            case 36 -> rule_36(state); // Member
            case 37 -> rule_37(state); // List<Seq2<Comma,Member>>
            case 38 -> rule_38(state); // List<Seq2<Comma,JsonValue>>
            case 39 -> rule_39(state); // Left<Char1,BsEsc>
            case 40 -> rule_40(state); // Right<Char1,BsEsc>
            case 41 -> rule_41(state); // @Ch("-")Character
            case 42 -> rule_42(state); // DigitsNZ
            case 43 -> rule_43(state); // Digit
            case 44 -> rule_44(state); // Fraction
            case 45 -> rule_45(state); // Exponent
            case 46 -> rule_46(state); // @Word(":")Void
            case 47 -> rule_47(state); // Seq2<Comma,Member>
            case 48 -> rule_48(state); // Seq2<Comma,JsonValue>
            case 49 -> rule_49(state); // Char1
            case 50 -> rule_50(state); // BsEsc
            case 51 -> rule_51(state); // @Regex("[1-9]")char
            case 52 -> rule_52(state); // Digits
            case 53 -> rule_53(state); // @Regex("[0-9]")char
            case 54 -> rule_54(state); // @Ch(".")char
            case 55 -> rule_55(state); // @Ch("Ee")char
            case 56 -> rule_56(state); // Opt<@Ch("+-")Character>
            case 57 -> rule_57(state); // Comma
            case 58 -> rule_58(state); // @Ch(except="\\\"",range={32,1114111})int
            case 59 -> rule_59(state); // @Ch("\\")Void
            case 60 -> rule_60(state); // Either<EscChar,EscUhhhh>
            case 61 -> rule_61(state); // @Regex("[0-9]")char@AtLeast(1)[]
            case 62 -> rule_62(state); // Some<@Ch("+-")Character>
            case 63 -> rule_63(state); // None<@Ch("+-")Character>
            case 64 -> rule_64(state); // Left<EscChar,EscUhhhh>
            case 65 -> rule_65(state); // Right<EscChar,EscUhhhh>
            case 66 -> rule_66(state); // @Ch("+-")Character
            case 67 -> rule_67(state); // EscChar
            case 68 -> rule_68(state); // EscUhhhh
            case 69 -> rule_69(state); // @Ch("\\\"/bfnrt")char
            case 70 -> rule_70(state); // @Ch("u")Void
            case 71 -> rule_71(state); // @Regex("[0-9A-Fa-f]{4}")String
            default -> throw new AssertionError("unknown ruleId: "+ruleId);
        };
        state.pathPop();
        return state;
    }

    // concat rule for: Input
    static _State rule_0(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(1, state, 0); // arg_0: OptWs
        if(state.fail)
            return state.fail(start0);
        OptWs arg_0 = state.pickObj();

        state = match(2, state, 1); // arg_1: JsonValue
        if(state.fail)
            return state.fail(start0);
        JsonValue arg_1 = state.pickObj();

        Input value;
        try{
            value = new Input(arg_0, arg_1);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // regex rule for: OptWs
    static _State rule_1(_State state)
    {
        return match_regex_obj(state, 1, pattern_1, 1, OptWs.I);
    }
    static final java.util.regex.Pattern pattern_1 = java.util.regex.Pattern.compile("()[\\ \\t\\n\\r]*", 0);

    // alt rule for: JsonValue
    static _State rule_2(_State state) throws _FatalEx
    {
        state = match(3, state, 0); // JsonObject
        if(!state.fail)
            return state;

        state = match(4, state, 1); // JsonArray
        if(!state.fail)
            return state;

        state = match(5, state, 2); // JsonBoolean
        if(!state.fail)
            return state;

        state = match(6, state, 3); // JsonNull
        if(!state.fail)
            return state;

        state = match(7, state, 4); // JsonString
        if(!state.fail)
            return state;

        state = match(8, state, 5); // JsonNumber
        if(!state.fail)
            return state;

        return state;
    }


    // concat rule for: JsonObject
    static _State rule_3(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(9, state, 0); // arg_0: @Word("{")Void
        if(state.fail)
            return state.fail(start0);
        Void arg_0 = state.pickObj();

        state = match(10, state, 1); // arg_1: SepBy<Member,Comma>
        if(state.fail)
            return state.fail(start0);
        SepBy<Member, Comma> arg_1 = state.pickObj();

        state = match(11, state, 2); // arg_2: @Word("}")Void
        if(state.fail)
            return state.fail(start0);
        Void arg_2 = state.pickObj();

        JsonObject value;
        try{
            value = new JsonObject(arg_0, arg_1, arg_2);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: JsonArray
    static _State rule_4(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(12, state, 0); // arg_0: @Word("[")Void
        if(state.fail)
            return state.fail(start0);
        Void arg_0 = state.pickObj();

        state = match(13, state, 1); // arg_1: SepBy<JsonValue,Comma>
        if(state.fail)
            return state.fail(start0);
        SepBy<JsonValue, Comma> arg_1 = state.pickObj();

        state = match(14, state, 2); // arg_2: @Word("]")Void
        if(state.fail)
            return state.fail(start0);
        Void arg_2 = state.pickObj();

        JsonArray value;
        try{
            value = new JsonArray(arg_0, arg_1, arg_2);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // alt rule for: JsonBoolean
    static _State rule_5(_State state) throws _FatalEx
    {
        state = match(15, state, 0); // @Word("true")JsonBoolean
        if(!state.fail)
            return state;

        state = match(16, state, 1); // @Word("false")JsonBoolean
        if(!state.fail)
            return state;

        return state;
    }


    // regex rule for: JsonNull
    static _State rule_6(_State state)
    {
        return match_regex_obj(state, 6, pattern_6, 1, JsonNull.NULL);
    }
    static final java.util.regex.Pattern pattern_6 = java.util.regex.Pattern.compile("(null)[\\ \\t\\n\\r]*", 0);

    // concat rule for: JsonString
    static _State rule_7(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(17, state, 0); // arg_0: @Ch("\"")Void
        if(state.fail)
            return state.fail(start0);
        Void arg_0 = state.pickObj();

        state = match(18, state, 1); // arg_1: Either<Char1,BsEsc>[]
        if(state.fail)
            return state.fail(start0);
        Either<Char1, BsEsc>[] arg_1 = state.pickObj();

        state = match(17, state, 2); // arg_2: @Ch("\"")Void
        if(state.fail)
            return state.fail(start0);
        Void arg_2 = state.pickObj();

        state = match(1, state, 3); // arg_3: OptWs
        if(state.fail)
            return state.fail(start0);
        OptWs arg_3 = state.pickObj();

        JsonString value;
        try{
            value = new JsonString(arg_0, arg_1, arg_2, arg_3);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: JsonNumber
    static _State rule_8(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(19, state, 0); // arg_0: Opt<@Ch("-")Character>
        if(state.fail)
            return state.fail(start0);
        Opt<Character> arg_0 = state.pickObj();

        state = match(20, state, 1); // arg_1: Either<DigitsNZ,Digit>
        if(state.fail)
            return state.fail(start0);
        Either<DigitsNZ, Digit> arg_1 = state.pickObj();

        state = match(21, state, 2); // arg_2: Opt<Fraction>
        if(state.fail)
            return state.fail(start0);
        Opt<Fraction> arg_2 = state.pickObj();

        state = match(22, state, 3); // arg_3: Opt<Exponent>
        if(state.fail)
            return state.fail(start0);
        Opt<Exponent> arg_3 = state.pickObj();

        state = match(1, state, 4); // arg_4: OptWs
        if(state.fail)
            return state.fail(start0);
        OptWs arg_4 = state.pickObj();

        JsonNumber value;
        try{
            value = new JsonNumber(arg_0, arg_1, arg_2, arg_3, arg_4);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // regex rule for: @Word("{")Void
    static _State rule_9(_State state)
    {
        return match_regex(state, 9, pattern_9, 1);
    }
    static final java.util.regex.Pattern pattern_9 = java.util.regex.Pattern.compile("(\\{)[\\ \\t\\n\\r]*", 0);

    // alt rule for: SepBy<Member,Comma>
    static _State rule_10(_State state) throws _FatalEx
    {
        state = match(23, state, 0); // SepBy1<Member,Comma>
        if(!state.fail)
            return state;

        state = match(24, state, 1); // Empty<Member,Comma>
        if(!state.fail)
            return state;

        return state;
    }


    // regex rule for: @Word("}")Void
    static _State rule_11(_State state)
    {
        return match_regex(state, 11, pattern_11, 1);
    }
    static final java.util.regex.Pattern pattern_11 = java.util.regex.Pattern.compile("(\\})[\\ \\t\\n\\r]*", 0);

    // regex rule for: @Word("[")Void
    static _State rule_12(_State state)
    {
        return match_regex(state, 12, pattern_12, 1);
    }
    static final java.util.regex.Pattern pattern_12 = java.util.regex.Pattern.compile("(\\[)[\\ \\t\\n\\r]*", 0);

    // alt rule for: SepBy<JsonValue,Comma>
    static _State rule_13(_State state) throws _FatalEx
    {
        state = match(25, state, 0); // SepBy1<JsonValue,Comma>
        if(!state.fail)
            return state;

        state = match(26, state, 1); // Empty<JsonValue,Comma>
        if(!state.fail)
            return state;

        return state;
    }


    // regex rule for: @Word("]")Void
    static _State rule_14(_State state)
    {
        return match_regex(state, 14, pattern_14, 1);
    }
    static final java.util.regex.Pattern pattern_14 = java.util.regex.Pattern.compile("(\\])[\\ \\t\\n\\r]*", 0);

    // regex rule for: @Word("true")JsonBoolean
    static _State rule_15(_State state)
    {
        return match_regex_obj(state, 15, pattern_15, 1, JsonBoolean.TRUE);
    }
    static final java.util.regex.Pattern pattern_15 = java.util.regex.Pattern.compile("(true)[\\ \\t\\n\\r]*", 0);

    // regex rule for: @Word("false")JsonBoolean
    static _State rule_16(_State state)
    {
        return match_regex_obj(state, 16, pattern_16, 1, JsonBoolean.FALSE);
    }
    static final java.util.regex.Pattern pattern_16 = java.util.regex.Pattern.compile("(false)[\\ \\t\\n\\r]*", 0);

    // regex rule for: @Ch("\"")Void
    static _State rule_17(_State state)
    {
        return match_regex(state, 17, pattern_17, 0);
    }
    static final java.util.regex.Pattern pattern_17 = java.util.regex.Pattern.compile("\"", 0);

    // repeat rule for: Either<Char1,BsEsc>[]
    static _State rule_18(_State state) throws _FatalEx
    {
        state = match_repeat(state, 18, 27, 0, Integer.MAX_VALUE);
        if(state.fail)
            return state;
        java.util.ArrayList<Either<Char1, BsEsc>> list = state.pickObj();
        Either<Char1, BsEsc>[] array = list.toArray(generic_array());
        return state.ok(array);
    }

    // alt rule for: Opt<@Ch("-")Character>
    static _State rule_19(_State state) throws _FatalEx
    {
        state = match(28, state, 0); // Some<@Ch("-")Character>
        if(!state.fail)
            return state;

        state = match(29, state, 1); // None<@Ch("-")Character>
        if(!state.fail)
            return state;

        return state;
    }


    // alt rule for: Either<DigitsNZ,Digit>
    static _State rule_20(_State state) throws _FatalEx
    {
        state = match(30, state, 0); // Left<DigitsNZ,Digit>
        if(!state.fail)
            return state;

        state = match(31, state, 1); // Right<DigitsNZ,Digit>
        if(!state.fail)
            return state;

        return state;
    }


    // alt rule for: Opt<Fraction>
    static _State rule_21(_State state) throws _FatalEx
    {
        state = match(32, state, 0); // Some<Fraction>
        if(!state.fail)
            return state;

        state = match(33, state, 1); // None<Fraction>
        if(!state.fail)
            return state;

        return state;
    }


    // alt rule for: Opt<Exponent>
    static _State rule_22(_State state) throws _FatalEx
    {
        state = match(34, state, 0); // Some<Exponent>
        if(!state.fail)
            return state;

        state = match(35, state, 1); // None<Exponent>
        if(!state.fail)
            return state;

        return state;
    }


    // concat rule for: SepBy1<Member,Comma>
    static _State rule_23(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(36, state, 0); // arg_0: Member
        if(state.fail)
            return state.fail(start0);
        Member arg_0 = state.pickObj();

        state = match(37, state, 1); // arg_1: List<Seq2<Comma,Member>>
        if(state.fail)
            return state.fail(start0);
        List<Seq2<Comma, Member>> arg_1 = state.pickObj();

        SepBy1<Member, Comma> value;
        try{
            value = SepBy1.ctor(arg_0, arg_1);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: Empty<Member,Comma>
    static _State rule_24(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        Empty<Member, Comma> value;
        try{
            value = Empty.ctor();
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: SepBy1<JsonValue,Comma>
    static _State rule_25(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(2, state, 0); // arg_0: JsonValue
        if(state.fail)
            return state.fail(start0);
        JsonValue arg_0 = state.pickObj();

        state = match(38, state, 1); // arg_1: List<Seq2<Comma,JsonValue>>
        if(state.fail)
            return state.fail(start0);
        List<Seq2<Comma, JsonValue>> arg_1 = state.pickObj();

        SepBy1<JsonValue, Comma> value;
        try{
            value = SepBy1.ctor(arg_0, arg_1);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: Empty<JsonValue,Comma>
    static _State rule_26(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        Empty<JsonValue, Comma> value;
        try{
            value = Empty.ctor();
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // alt rule for: Either<Char1,BsEsc>
    static _State rule_27(_State state) throws _FatalEx
    {
        state = match(39, state, 0); // Left<Char1,BsEsc>
        if(!state.fail)
            return state;

        state = match(40, state, 1); // Right<Char1,BsEsc>
        if(!state.fail)
            return state;

        return state;
    }


    // concat rule for: Some<@Ch("-")Character>
    static _State rule_28(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(41, state, 0); // arg_0: @Ch("-")Character
        if(state.fail)
            return state.fail(start0);
        Character arg_0 = state.pickObj();

        Some<Character> value;
        try{
            value = new Some<Character>(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: None<@Ch("-")Character>
    static _State rule_29(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        None<Character> value;
        try{
            value = None.ctor();
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: Left<DigitsNZ,Digit>
    static _State rule_30(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(42, state, 0); // arg_0: DigitsNZ
        if(state.fail)
            return state.fail(start0);
        DigitsNZ arg_0 = state.pickObj();

        Left<DigitsNZ, Digit> value;
        try{
            value = new Left<DigitsNZ, Digit>(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: Right<DigitsNZ,Digit>
    static _State rule_31(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(43, state, 0); // arg_0: Digit
        if(state.fail)
            return state.fail(start0);
        Digit arg_0 = state.pickObj();

        Right<DigitsNZ, Digit> value;
        try{
            value = new Right<DigitsNZ, Digit>(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: Some<Fraction>
    static _State rule_32(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(44, state, 0); // arg_0: Fraction
        if(state.fail)
            return state.fail(start0);
        Fraction arg_0 = state.pickObj();

        Some<Fraction> value;
        try{
            value = new Some<Fraction>(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: None<Fraction>
    static _State rule_33(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        None<Fraction> value;
        try{
            value = None.ctor();
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: Some<Exponent>
    static _State rule_34(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(45, state, 0); // arg_0: Exponent
        if(state.fail)
            return state.fail(start0);
        Exponent arg_0 = state.pickObj();

        Some<Exponent> value;
        try{
            value = new Some<Exponent>(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: None<Exponent>
    static _State rule_35(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        None<Exponent> value;
        try{
            value = None.ctor();
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: Member
    static _State rule_36(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(7, state, 0); // arg_0: JsonString
        if(state.fail)
            return state.fail(start0);
        JsonString arg_0 = state.pickObj();

        state = match(46, state, 1); // arg_1: @Word(":")Void
        if(state.fail)
            return state.fail(start0);
        Void arg_1 = state.pickObj();

        state = match(2, state, 2); // arg_2: JsonValue
        if(state.fail)
            return state.fail(start0);
        JsonValue arg_2 = state.pickObj();

        Member value;
        try{
            value = new Member(arg_0, arg_1, arg_2);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // repeat rule for: List<Seq2<Comma,Member>>
    static _State rule_37(_State state) throws _FatalEx
    {
        state = match_repeat(state, 37, 47, 0, Integer.MAX_VALUE);
        if(state.fail)
            return state;
        java.util.ArrayList<Seq2<Comma, Member>> list = state.pickObj();
        list.trimToSize();
        return state.ok(list);
    }

    // repeat rule for: List<Seq2<Comma,JsonValue>>
    static _State rule_38(_State state) throws _FatalEx
    {
        state = match_repeat(state, 38, 48, 0, Integer.MAX_VALUE);
        if(state.fail)
            return state;
        java.util.ArrayList<Seq2<Comma, JsonValue>> list = state.pickObj();
        list.trimToSize();
        return state.ok(list);
    }

    // concat rule for: Left<Char1,BsEsc>
    static _State rule_39(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(49, state, 0); // arg_0: Char1
        if(state.fail)
            return state.fail(start0);
        Char1 arg_0 = state.pickObj();

        Left<Char1, BsEsc> value;
        try{
            value = new Left<Char1, BsEsc>(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: Right<Char1,BsEsc>
    static _State rule_40(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(50, state, 0); // arg_0: BsEsc
        if(state.fail)
            return state.fail(start0);
        BsEsc arg_0 = state.pickObj();

        Right<Char1, BsEsc> value;
        try{
            value = new Right<Char1, BsEsc>(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // regex rule for: @Ch("-")Character
    static _State rule_41(_State state) throws _FatalEx
    {
        return match_regex_char(state, 41, pattern_41, 0);
    }
    static final java.util.regex.Pattern pattern_41 = java.util.regex.Pattern.compile("\\-", 0);

    // concat rule for: DigitsNZ
    static _State rule_42(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(51, state, 0); // arg_0: @Regex("[1-9]")char
        if(state.fail)
            return state.fail(start0);
        char arg_0 = state.pickObj();

        state = match(52, state, 1); // arg_1: Digits
        if(state.fail)
            return state.fail(start0);
        Digits arg_1 = state.pickObj();

        DigitsNZ value;
        try{
            value = new DigitsNZ(arg_0, arg_1);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: Digit
    static _State rule_43(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(53, state, 0); // arg_0: @Regex("[0-9]")char
        if(state.fail)
            return state.fail(start0);
        char arg_0 = state.pickObj();

        Digit value;
        try{
            value = new Digit(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: Fraction
    static _State rule_44(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(54, state, 0); // arg_0: @Ch(".")char
        if(state.fail)
            return state.fail(start0);
        char arg_0 = state.pickObj();

        state = match(52, state, 1); // arg_1: Digits
        if(state.fail)
            return state.fail(start0);
        Digits arg_1 = state.pickObj();

        Fraction value;
        try{
            value = new Fraction(arg_0, arg_1);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: Exponent
    static _State rule_45(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(55, state, 0); // arg_0: @Ch("Ee")char
        if(state.fail)
            return state.fail(start0);
        char arg_0 = state.pickObj();

        state = match(56, state, 1); // arg_1: Opt<@Ch("+-")Character>
        if(state.fail)
            return state.fail(start0);
        Opt<Character> arg_1 = state.pickObj();

        state = match(52, state, 2); // arg_2: Digits
        if(state.fail)
            return state.fail(start0);
        Digits arg_2 = state.pickObj();

        Exponent value;
        try{
            value = new Exponent(arg_0, arg_1, arg_2);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // regex rule for: @Word(":")Void
    static _State rule_46(_State state)
    {
        return match_regex(state, 46, pattern_46, 1);
    }
    static final java.util.regex.Pattern pattern_46 = java.util.regex.Pattern.compile("(:)[\\ \\t\\n\\r]*", 0);

    // concat rule for: Seq2<Comma,Member>
    static _State rule_47(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(57, state, 0); // arg_0: Comma
        if(state.fail)
            return state.fail(start0);
        Comma arg_0 = state.pickObj();

        state = match(36, state, 1); // arg_1: Member
        if(state.fail)
            return state.fail(start0);
        Member arg_1 = state.pickObj();

        Seq2<Comma, Member> value;
        try{
            value = new Seq2<Comma, Member>(arg_0, arg_1);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: Seq2<Comma,JsonValue>
    static _State rule_48(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(57, state, 0); // arg_0: Comma
        if(state.fail)
            return state.fail(start0);
        Comma arg_0 = state.pickObj();

        state = match(2, state, 1); // arg_1: JsonValue
        if(state.fail)
            return state.fail(start0);
        JsonValue arg_1 = state.pickObj();

        Seq2<Comma, JsonValue> value;
        try{
            value = new Seq2<Comma, JsonValue>(arg_0, arg_1);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: Char1
    static _State rule_49(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(58, state, 0); // arg_0: @Ch(except="\\\"",range={32,1114111})int
        if(state.fail)
            return state.fail(start0);
        int arg_0 = state.pickObj();

        Char1 value;
        try{
            value = new Char1(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: BsEsc
    static _State rule_50(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(59, state, 0); // arg_0: @Ch("\\")Void
        if(state.fail)
            return state.fail(start0);
        Void arg_0 = state.pickObj();

        state = match(60, state, 1); // arg_1: Either<EscChar,EscUhhhh>
        if(state.fail)
            return state.fail(start0);
        Either<EscChar, EscUhhhh> arg_1 = state.pickObj();

        BsEsc value;
        try{
            value = new BsEsc(arg_0, arg_1);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // regex rule for: @Regex("[1-9]")char
    static _State rule_51(_State state) throws _FatalEx
    {
        return match_regex_char(state, 51, pattern_51, 0);
    }
    static final java.util.regex.Pattern pattern_51 = java.util.regex.Pattern.compile("[1-9]", 0);

    // concat rule for: Digits
    static _State rule_52(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(61, state, 0); // arg_0: @Regex("[0-9]")char@AtLeast(1)[]
        if(state.fail)
            return state.fail(start0);
        char[] arg_0 = state.pickObj();

        Digits value;
        try{
            value = new Digits(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // regex rule for: @Regex("[0-9]")char
    static _State rule_53(_State state) throws _FatalEx
    {
        return match_regex_char(state, 53, pattern_53, 0);
    }
    static final java.util.regex.Pattern pattern_53 = java.util.regex.Pattern.compile("[0-9]", 0);

    // regex rule for: @Ch(".")char
    static _State rule_54(_State state) throws _FatalEx
    {
        return match_regex_char(state, 54, pattern_54, 0);
    }
    static final java.util.regex.Pattern pattern_54 = java.util.regex.Pattern.compile("\\.", 0);

    // regex rule for: @Ch("Ee")char
    static _State rule_55(_State state) throws _FatalEx
    {
        return match_regex_char(state, 55, pattern_55, 0);
    }
    static final java.util.regex.Pattern pattern_55 = java.util.regex.Pattern.compile("[Ee]", 0);

    // alt rule for: Opt<@Ch("+-")Character>
    static _State rule_56(_State state) throws _FatalEx
    {
        state = match(62, state, 0); // Some<@Ch("+-")Character>
        if(!state.fail)
            return state;

        state = match(63, state, 1); // None<@Ch("+-")Character>
        if(!state.fail)
            return state;

        return state;
    }


    // regex rule for: Comma
    static _State rule_57(_State state)
    {
        return match_regex_obj(state, 57, pattern_57, 1, Comma.COMMA);
    }
    static final java.util.regex.Pattern pattern_57 = java.util.regex.Pattern.compile("(,)[\\ \\t\\n\\r]*", 0);

    // regex rule for: @Ch(except="\\\"",range={32,1114111})int
    static _State rule_58(_State state) throws _FatalEx
    {
        return match_regex_int(state, 58, pattern_58, 0);
    }
    static final java.util.regex.Pattern pattern_58 = java.util.regex.Pattern.compile("[\\ -\\x{10FFFF}&&[^\\\\\"]]", 0);

    // regex rule for: @Ch("\\")Void
    static _State rule_59(_State state)
    {
        return match_regex(state, 59, pattern_59, 0);
    }
    static final java.util.regex.Pattern pattern_59 = java.util.regex.Pattern.compile("\\\\", 0);

    // alt rule for: Either<EscChar,EscUhhhh>
    static _State rule_60(_State state) throws _FatalEx
    {
        state = match(64, state, 0); // Left<EscChar,EscUhhhh>
        if(!state.fail)
            return state;

        state = match(65, state, 1); // Right<EscChar,EscUhhhh>
        if(!state.fail)
            return state;

        return state;
    }


    // repeat rule for: @Regex("[0-9]")char@AtLeast(1)[]
    static _State rule_61(_State state) throws _FatalEx
    {
        state = match_repeat(state, 61, 53, 1, Integer.MAX_VALUE);
        if(state.fail)
            return state;
        java.util.ArrayList<Character> list = state.pickObj();
        char[] array = new char[list.size()];
        for(int i=0; i<list.size(); i++)
            array[i] = list.get(i);
        return state.ok(array);
    }

    // concat rule for: Some<@Ch("+-")Character>
    static _State rule_62(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(66, state, 0); // arg_0: @Ch("+-")Character
        if(state.fail)
            return state.fail(start0);
        Character arg_0 = state.pickObj();

        Some<Character> value;
        try{
            value = new Some<Character>(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: None<@Ch("+-")Character>
    static _State rule_63(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        None<Character> value;
        try{
            value = None.ctor();
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: Left<EscChar,EscUhhhh>
    static _State rule_64(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(67, state, 0); // arg_0: EscChar
        if(state.fail)
            return state.fail(start0);
        EscChar arg_0 = state.pickObj();

        Left<EscChar, EscUhhhh> value;
        try{
            value = new Left<EscChar, EscUhhhh>(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: Right<EscChar,EscUhhhh>
    static _State rule_65(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(68, state, 0); // arg_0: EscUhhhh
        if(state.fail)
            return state.fail(start0);
        EscUhhhh arg_0 = state.pickObj();

        Right<EscChar, EscUhhhh> value;
        try{
            value = new Right<EscChar, EscUhhhh>(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // regex rule for: @Ch("+-")Character
    static _State rule_66(_State state) throws _FatalEx
    {
        return match_regex_char(state, 66, pattern_66, 0);
    }
    static final java.util.regex.Pattern pattern_66 = java.util.regex.Pattern.compile("[\\+\\-]", 0);

    // concat rule for: EscChar
    static _State rule_67(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(69, state, 0); // arg_0: @Ch("\\\"/bfnrt")char
        if(state.fail)
            return state.fail(start0);
        char arg_0 = state.pickObj();

        EscChar value;
        try{
            value = new EscChar(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: EscUhhhh
    static _State rule_68(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(70, state, 0); // arg_0: @Ch("u")Void
        if(state.fail)
            return state.fail(start0);
        Void arg_0 = state.pickObj();

        state = match(71, state, 1); // arg_1: @Regex("[0-9A-Fa-f]{4}")String
        if(state.fail)
            return state.fail(start0);
        String arg_1 = state.pickObj();

        EscUhhhh value;
        try{
            value = new EscUhhhh(arg_0, arg_1);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // regex rule for: @Ch("\\\"/bfnrt")char
    static _State rule_69(_State state) throws _FatalEx
    {
        return match_regex_char(state, 69, pattern_69, 0);
    }
    static final java.util.regex.Pattern pattern_69 = java.util.regex.Pattern.compile("[\\\\\"/bfnrt]", 0);

    // regex rule for: @Ch("u")Void
    static _State rule_70(_State state)
    {
        return match_regex(state, 70, pattern_70, 0);
    }
    static final java.util.regex.Pattern pattern_70 = java.util.regex.Pattern.compile("u", 0);

    // regex rule for: @Regex("[0-9A-Fa-f]{4}")String
    static _State rule_71(_State state)
    {
        return match_regex_str(state, 71, pattern_71, 0);
    }
    static final java.util.regex.Pattern pattern_71 = java.util.regex.Pattern.compile("[0-9A-Fa-f]{4}", 0);



    // = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
    //
    // = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

    static <T> T[] generic_array(T... array)
    {
        return array;
    }

    static _State match_repeat(_State state, int ruleId, int subRuleId, int min, int max) throws _FatalEx
    {
        final int start0 = state.start;
        java.util.ArrayList<Object> list = new java.util.ArrayList<>(Math.max(min, Math.min(10, max)));
        for(int i=0; i<max; i++)
        {
            final int start1 = state.start;
            state = match(subRuleId, state, i);
            if(i<min && state.fail)
                return state.fail(start0);
            if(i>=min && state.fail) // enough elements
                break;
            if(i>=min && start1==state.start) // no progress, enough elements
                break;
            list.add(state.pickObj());
        }
        return state.ok(list);
    }

    static _State match_regex(_State state, int ruleId, java.util.regex.Pattern pattern, int group)
    {
        var matcher = pattern.matcher(state.chars);
        matcher.region(state.start, state.end);
        boolean matched = matcher.lookingAt();
        if(!matched)
            return state.fail(state.start, failReason_regex, null, ruleId, state.start);

        state.gStart = matcher.start(group);
        state.gEnd = matcher.end(group);
        if(state.gStart==-1)
            return state.fail(state.start, failReason_regex_group, null, ruleId, state.start);

        state.start = matcher.end(0); // consume group 0
        return state.ok(null);
    }
    static _State match_regex_char(_State state, int ruleId, java.util.regex.Pattern pattern, int group) throws _FatalEx
    {
        state = match_regex_int(state, ruleId, pattern, group);
        if(state.fail)
            return state;
        Integer x = state.pickObj();
        if(x>0xFFFF)
        {
            // programming mistake in the regex, or an unexpected input
            String msg = "expected to match exactly 1 char; matched=%s, start=%s, end=%s, regex=%s"
                .formatted(Integer.toHexString(x), state.gStart, state.gEnd, pattern.pattern());
            throw new _FatalEx(state.gStart, new Exception(msg));
        }
        return state.ok(Character.valueOf((char)x.intValue()));
    }
    static _State match_regex_int(_State state, int ruleId, java.util.regex.Pattern pattern, int group) throws _FatalEx
    {
        state = match_regex(state, ruleId, pattern, group);
        if(state.fail)
            return state;
        int count = Character.codePointCount(state.chars, state.gStart, state.gEnd);
        if(count==1)
        {
            int code = Character.codePointAt(state.chars, state.gStart);
            if(Character.charCount(code)==state.gEnd-state.gStart) // could it fail?
                return state.ok(code);
        }
        // programming mistake in the regex, or an unexpected input
        String msg = "expected to match exactly 1 code point; start=%s, end=%s, regex=%s"
            .formatted(state.gStart, state.gEnd, pattern.pattern());
        throw new _FatalEx(state.gStart, new Exception(msg));
    }
    static _State match_regex_str(_State state, int ruleId, java.util.regex.Pattern pattern, int group)
    {
        state = match_regex(state, ruleId, pattern, group);
        if(state.fail)
            return state;
        String str = state.chars.subSequence(state.gStart, state.gEnd).toString();
        return state.ok(str);
    }
    static _State match_regex_obj(_State state, int ruleId, java.util.regex.Pattern pattern, int group, Object obj)
    {
        state = match_regex(state, ruleId, pattern, group);
        if(state.fail)
            return state;
        return state.ok(obj);
    }
    static class _DatatypeList
    {
        // [0] Input
        static org.rekex.exmple.parser.json.ExampleParser_Json1.Input t_0;
        // [1] OptWs
        static org.rekex.exmple.parser.json.ExampleParser_Json1.OptWs t_1;
        // [2] JsonValue
        static org.rekex.exmple.parser.json.ExampleParser_Json1.JsonValue t_2;
        // [3] JsonObject
        static org.rekex.exmple.parser.json.ExampleParser_Json1.JsonObject t_3;
        // [4] JsonArray
        static org.rekex.exmple.parser.json.ExampleParser_Json1.JsonArray t_4;
        // [5] JsonBoolean
        static org.rekex.exmple.parser.json.ExampleParser_Json1.JsonBoolean t_5;
        // [6] JsonNull
        static org.rekex.exmple.parser.json.ExampleParser_Json1.JsonNull t_6;
        // [7] JsonString
        static org.rekex.exmple.parser.json.ExampleParser_Json1.JsonString t_7;
        // [8] JsonNumber
        static org.rekex.exmple.parser.json.ExampleParser_Json1.JsonNumber t_8;
        // [9] @Word("{")Void
        static java.lang.@org.rekex.exmple.parser.json.ExampleParser_Json1.Word(value={"{"})Void t_9;
        // [10] SepBy<Member,Comma>
        static org.rekex.helper.datatype.SepBy<org.rekex.exmple.parser.json.ExampleParser_Json1.Member,org.rekex.exmple.parser.json.ExampleParser_Json1.Comma> t_10;
        // [11] @Word("}")Void
        static java.lang.@org.rekex.exmple.parser.json.ExampleParser_Json1.Word(value={"}"})Void t_11;
        // [12] @Word("[")Void
        static java.lang.@org.rekex.exmple.parser.json.ExampleParser_Json1.Word(value={"["})Void t_12;
        // [13] SepBy<JsonValue,Comma>
        static org.rekex.helper.datatype.SepBy<org.rekex.exmple.parser.json.ExampleParser_Json1.JsonValue,org.rekex.exmple.parser.json.ExampleParser_Json1.Comma> t_13;
        // [14] @Word("]")Void
        static java.lang.@org.rekex.exmple.parser.json.ExampleParser_Json1.Word(value={"]"})Void t_14;
        // [15] @Word("true")JsonBoolean
        static org.rekex.exmple.parser.json.ExampleParser_Json1.@org.rekex.exmple.parser.json.ExampleParser_Json1.Word(value={"true"})JsonBoolean t_15;
        // [16] @Word("false")JsonBoolean
        static org.rekex.exmple.parser.json.ExampleParser_Json1.@org.rekex.exmple.parser.json.ExampleParser_Json1.Word(value={"false"})JsonBoolean t_16;
        // [17] @Ch("\"")Void
        static java.lang.@org.rekex.helper.anno.Ch(except="", ignoreCase=false, range={}, value="\"")Void t_17;
        // [18] Either<Char1,BsEsc>[]
        static org.rekex.helper.datatype.Either<org.rekex.exmple.parser.json.ExampleParser_Json1.Char1,org.rekex.exmple.parser.json.ExampleParser_Json1.BsEsc>[] t_18;
        // [19] Opt<@Ch("-")Character>
        static org.rekex.helper.datatype.Opt<java.lang.@org.rekex.helper.anno.Ch(except="", ignoreCase=false, range={}, value="-")Character> t_19;
        // [20] Either<DigitsNZ,Digit>
        static org.rekex.helper.datatype.Either<org.rekex.exmple.parser.json.ExampleParser_Json1.DigitsNZ,org.rekex.exmple.parser.json.ExampleParser_Json1.Digit> t_20;
        // [21] Opt<Fraction>
        static org.rekex.helper.datatype.Opt<org.rekex.exmple.parser.json.ExampleParser_Json1.Fraction> t_21;
        // [22] Opt<Exponent>
        static org.rekex.helper.datatype.Opt<org.rekex.exmple.parser.json.ExampleParser_Json1.Exponent> t_22;
        // [23] SepBy1<Member,Comma>
        static org.rekex.helper.datatype.SepBy1<org.rekex.exmple.parser.json.ExampleParser_Json1.Member,org.rekex.exmple.parser.json.ExampleParser_Json1.Comma> t_23;
        // [24] Empty<Member,Comma>
        static org.rekex.helper.datatype.SepBy.Empty<org.rekex.exmple.parser.json.ExampleParser_Json1.Member,org.rekex.exmple.parser.json.ExampleParser_Json1.Comma> t_24;
        // [25] SepBy1<JsonValue,Comma>
        static org.rekex.helper.datatype.SepBy1<org.rekex.exmple.parser.json.ExampleParser_Json1.JsonValue,org.rekex.exmple.parser.json.ExampleParser_Json1.Comma> t_25;
        // [26] Empty<JsonValue,Comma>
        static org.rekex.helper.datatype.SepBy.Empty<org.rekex.exmple.parser.json.ExampleParser_Json1.JsonValue,org.rekex.exmple.parser.json.ExampleParser_Json1.Comma> t_26;
        // [27] Either<Char1,BsEsc>
        static org.rekex.helper.datatype.Either<org.rekex.exmple.parser.json.ExampleParser_Json1.Char1,org.rekex.exmple.parser.json.ExampleParser_Json1.BsEsc> t_27;
        // [28] Some<@Ch("-")Character>
        static org.rekex.helper.datatype.Opt.Some<java.lang.@org.rekex.helper.anno.Ch(except="", ignoreCase=false, range={}, value="-")Character> t_28;
        // [29] None<@Ch("-")Character>
        static org.rekex.helper.datatype.Opt.None<java.lang.@org.rekex.helper.anno.Ch(except="", ignoreCase=false, range={}, value="-")Character> t_29;
        // [30] Left<DigitsNZ,Digit>
        static org.rekex.helper.datatype.Either.Left<org.rekex.exmple.parser.json.ExampleParser_Json1.DigitsNZ,org.rekex.exmple.parser.json.ExampleParser_Json1.Digit> t_30;
        // [31] Right<DigitsNZ,Digit>
        static org.rekex.helper.datatype.Either.Right<org.rekex.exmple.parser.json.ExampleParser_Json1.DigitsNZ,org.rekex.exmple.parser.json.ExampleParser_Json1.Digit> t_31;
        // [32] Some<Fraction>
        static org.rekex.helper.datatype.Opt.Some<org.rekex.exmple.parser.json.ExampleParser_Json1.Fraction> t_32;
        // [33] None<Fraction>
        static org.rekex.helper.datatype.Opt.None<org.rekex.exmple.parser.json.ExampleParser_Json1.Fraction> t_33;
        // [34] Some<Exponent>
        static org.rekex.helper.datatype.Opt.Some<org.rekex.exmple.parser.json.ExampleParser_Json1.Exponent> t_34;
        // [35] None<Exponent>
        static org.rekex.helper.datatype.Opt.None<org.rekex.exmple.parser.json.ExampleParser_Json1.Exponent> t_35;
        // [36] Member
        static org.rekex.exmple.parser.json.ExampleParser_Json1.Member t_36;
        // [37] List<Seq2<Comma,Member>>
        static java.util.List<org.rekex.helper.datatype.seq.Seq2<org.rekex.exmple.parser.json.ExampleParser_Json1.Comma,org.rekex.exmple.parser.json.ExampleParser_Json1.Member>> t_37;
        // [38] List<Seq2<Comma,JsonValue>>
        static java.util.List<org.rekex.helper.datatype.seq.Seq2<org.rekex.exmple.parser.json.ExampleParser_Json1.Comma,org.rekex.exmple.parser.json.ExampleParser_Json1.JsonValue>> t_38;
        // [39] Left<Char1,BsEsc>
        static org.rekex.helper.datatype.Either.Left<org.rekex.exmple.parser.json.ExampleParser_Json1.Char1,org.rekex.exmple.parser.json.ExampleParser_Json1.BsEsc> t_39;
        // [40] Right<Char1,BsEsc>
        static org.rekex.helper.datatype.Either.Right<org.rekex.exmple.parser.json.ExampleParser_Json1.Char1,org.rekex.exmple.parser.json.ExampleParser_Json1.BsEsc> t_40;
        // [41] @Ch("-")Character
        static java.lang.@org.rekex.helper.anno.Ch(except="", ignoreCase=false, range={}, value="-")Character t_41;
        // [42] DigitsNZ
        static org.rekex.exmple.parser.json.ExampleParser_Json1.DigitsNZ t_42;
        // [43] Digit
        static org.rekex.exmple.parser.json.ExampleParser_Json1.Digit t_43;
        // [44] Fraction
        static org.rekex.exmple.parser.json.ExampleParser_Json1.Fraction t_44;
        // [45] Exponent
        static org.rekex.exmple.parser.json.ExampleParser_Json1.Exponent t_45;
        // [46] @Word(":")Void
        static java.lang.@org.rekex.exmple.parser.json.ExampleParser_Json1.Word(value={":"})Void t_46;
        // [47] Seq2<Comma,Member>
        static org.rekex.helper.datatype.seq.Seq2<org.rekex.exmple.parser.json.ExampleParser_Json1.Comma,org.rekex.exmple.parser.json.ExampleParser_Json1.Member> t_47;
        // [48] Seq2<Comma,JsonValue>
        static org.rekex.helper.datatype.seq.Seq2<org.rekex.exmple.parser.json.ExampleParser_Json1.Comma,org.rekex.exmple.parser.json.ExampleParser_Json1.JsonValue> t_48;
        // [49] Char1
        static org.rekex.exmple.parser.json.ExampleParser_Json1.Char1 t_49;
        // [50] BsEsc
        static org.rekex.exmple.parser.json.ExampleParser_Json1.BsEsc t_50;
        // [51] @Regex("[1-9]")char
        static @org.rekex.spec.Regex(flags=0, group=0, value="[1-9]")char t_51;
        // [52] Digits
        static org.rekex.exmple.parser.json.ExampleParser_Json1.Digits t_52;
        // [53] @Regex("[0-9]")char
        static @org.rekex.spec.Regex(flags=0, group=0, value="[0-9]")char t_53;
        // [54] @Ch(".")char
        static @org.rekex.helper.anno.Ch(except="", ignoreCase=false, range={}, value=".")char t_54;
        // [55] @Ch("Ee")char
        static @org.rekex.helper.anno.Ch(except="", ignoreCase=false, range={}, value="Ee")char t_55;
        // [56] Opt<@Ch("+-")Character>
        static org.rekex.helper.datatype.Opt<java.lang.@org.rekex.helper.anno.Ch(except="", ignoreCase=false, range={}, value="+-")Character> t_56;
        // [57] Comma
        static org.rekex.exmple.parser.json.ExampleParser_Json1.Comma t_57;
        // [58] @Ch(except="\\\"",range={32,1114111})int
        static @org.rekex.helper.anno.Ch(except="\\\"", ignoreCase=false, range={32, 1114111}, value="")int t_58;
        // [59] @Ch("\\")Void
        static java.lang.@org.rekex.helper.anno.Ch(except="", ignoreCase=false, range={}, value="\\")Void t_59;
        // [60] Either<EscChar,EscUhhhh>
        static org.rekex.helper.datatype.Either<org.rekex.exmple.parser.json.ExampleParser_Json1.EscChar,org.rekex.exmple.parser.json.ExampleParser_Json1.EscUhhhh> t_60;
        // [61] @Regex("[0-9]")char@AtLeast(1)[]
        static @org.rekex.spec.Regex(flags=0, group=0, value="[0-9]")char@org.rekex.helper.anno.AtLeast(value=1)[] t_61;
        // [62] Some<@Ch("+-")Character>
        static org.rekex.helper.datatype.Opt.Some<java.lang.@org.rekex.helper.anno.Ch(except="", ignoreCase=false, range={}, value="+-")Character> t_62;
        // [63] None<@Ch("+-")Character>
        static org.rekex.helper.datatype.Opt.None<java.lang.@org.rekex.helper.anno.Ch(except="", ignoreCase=false, range={}, value="+-")Character> t_63;
        // [64] Left<EscChar,EscUhhhh>
        static org.rekex.helper.datatype.Either.Left<org.rekex.exmple.parser.json.ExampleParser_Json1.EscChar,org.rekex.exmple.parser.json.ExampleParser_Json1.EscUhhhh> t_64;
        // [65] Right<EscChar,EscUhhhh>
        static org.rekex.helper.datatype.Either.Right<org.rekex.exmple.parser.json.ExampleParser_Json1.EscChar,org.rekex.exmple.parser.json.ExampleParser_Json1.EscUhhhh> t_65;
        // [66] @Ch("+-")Character
        static java.lang.@org.rekex.helper.anno.Ch(except="", ignoreCase=false, range={}, value="+-")Character t_66;
        // [67] EscChar
        static org.rekex.exmple.parser.json.ExampleParser_Json1.EscChar t_67;
        // [68] EscUhhhh
        static org.rekex.exmple.parser.json.ExampleParser_Json1.EscUhhhh t_68;
        // [69] @Ch("\\\"/bfnrt")char
        static @org.rekex.helper.anno.Ch(except="", ignoreCase=false, range={}, value="\\\"/bfnrt")char t_69;
        // [70] @Ch("u")Void
        static java.lang.@org.rekex.helper.anno.Ch(except="", ignoreCase=false, range={}, value="u")Void t_70;
        // [71] @Regex("[0-9A-Fa-f]{4}")String
        static java.lang.@org.rekex.spec.Regex(flags=0, group=0, value="[0-9A-Fa-f]{4}")String t_71;

        static final java.util.ArrayList<org.rekex.annotype.AnnoType> list = new java.util.ArrayList<>();
        static
        {
            for(int id=0; id<72; id++)
            {
                java.lang.reflect.Field field;
                try{ field = _DatatypeList.class.getDeclaredField("t_"+id); }
                catch(Exception ex){ ex.printStackTrace(); throw new Error(ex); }
                var type = org.rekex.annotype.TypeMath.convertFromJlr(field.getAnnotatedType());
                list.add(type);
            }
        }
    }

}
